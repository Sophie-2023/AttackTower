#include <iostream>

#include "EtatExploitation.h"
#include "EtatEnRoute.h"
#include "Carte.h"
#include "Loup.h"
#include "Chasseur.h"
#include "Elephant.h"

EtatExploitation::EtatExploitation(Lieu* foret_, TroupeManager* tm, sf::RenderWindow* win)
    : State(tm, win), foret(foret_) {
  barreProgression.setSize({50.f, 5.f});
  barreProgression.setFillColor(sf::Color::Blue);
}

void EtatExploitation::agir(Troupe& troupe, sf::Time elapsedTime) {
  sf::Vector2f pos = troupe.getPosition();
  barreProgression.setPosition({pos.x - 20, pos.y - 25});

  float proportion = 1.f - (tempsEcoule.asSeconds() / tempsTotal.asSeconds());
  proportion = std::clamp(proportion, 0.f, 1.f);  // éviter valeur négative

  barreProgression.setSize({50.f * proportion, 5.f});

  tempsEcoule += elapsedTime;
  
  // On change d'état au bout d'un certain temps
  if (tempsEcoule >= tempsTotal) {
    auto etatEnRoute = std::make_unique<EtatEnRoute>(troupeManager->getCarte()->getBase(), troupeManager, window);

    std::unique_ptr<Troupe> newTroupe;
    if (dynamic_cast<Loup*>(&troupe)) {
      newTroupe = troupeManager->creerTroupe("loup", foret);
    } else if (dynamic_cast<Chasseur*>(&troupe)) {
      newTroupe = troupeManager->creerTroupe("chasseur", foret);
    } else if (dynamic_cast<Elephant*>(&troupe)) {
      newTroupe = troupeManager->creerTroupe("elephant", foret);
    }

    newTroupe->setIsInBase(false);
    troupeManager->ajouterTroupe(std::move(newTroupe));
    troupe.changerEtat(std::move(etatEnRoute));
    return;
  }
 
}

void EtatExploitation::draw(sf::RenderWindow& window) const {
  window.draw(barreProgression);
}